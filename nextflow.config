// working directory for temporary/intermediate files produced in the workflow processes
workDir = "/mnt/bioinformatics/nextflow_tmp"
resume = true

params {
    // Define inputs and output directory
    sample_sheet        = './test_data/test_sample_sheet.csv'
    outdir              = './test_data/test_results'
    publish_dir_mode    = 'copy'

    // Genomic References
    genome              = 'GRCh38_no_alt' // required: value can be 'GRCh37-lite' or 'GRCh38_no_alt'
    fasta_file          = "/bioinformatics_resources/genome_references/human/GRCh38/cicero_1.9.6/FASTA/GRCh38_no_alt.fa" 
    gtf                 = "/bioinformatics_resources/genome_references/human/GRCh38/star_fusion_1.12.0/GRCh38_gencode_v44_CTAT_lib_Oct292023.plug-n-play/ctat_genome_lib_build_dir/ref_annot.gtf"

    // STAR-aligner index 
    build_index         = 'true' // required: boolean 'true' or 'false'
    star_index_dir      = '/bioinformatics_resources/genome_references/human/GRCh38/gencode_v44/star_2.7.9a' // required: filepath  

    // Fusion References 
    star_genome_lib     = "/bioinformatics_resources/genome_references/human/GRCh38/star_fusion_1.12.0/GRCh38_gencode_v44_CTAT_lib_Oct292023.plug-n-play"
    cicero_genome_lib   = "cicero_1.9.6"

    // Optionally, build fusion references
    build_genome_library        = 'false'
    pfam_db                     = 'current'
    dfam_db                     = 'human' // value of 'human', 'mouse', or filepath to Dfam.hmm database
}
/*
// Execution variables used by tasks at runtime. Set TMPDIR to be scratch directory
env {
     TMPDIR = "$HOME/temp"
}
*/

// Computational resource allocation for the processes run in the workflow
process {
    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].toLowerCase()}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]
    errorStrategy = "retry"
    maxRetries = 1
    //https://www.nextflow.io/docs/latest/process.html#scratch
    scratch = false 

    // STAR process specific parameters
    withName: STAR_PREP_FUSION {
        ext.prefix = { "${sample}star." }
        cpus = { 4 * task.attempt }
        memory = { 32.GB * task.attempt }
        label = 'high_priority'
        ext.args = ''
    }

    // STAR process specific parameters
    withName: STAR_FUSION {
        ext.prefix = { "${sample}starfusion." }
        cpus = { 4 * task.attempt }
        memory = { 32.GB * task.attempt }
        label = 'med_priority'
        ext.args = { "--FusionInspector inspect --extract_fusion_reads --examine_coding_effect --verbose_level 2" }
    }

    withName: CICERO {
        ext.prefix = { "${sample}${genome}cicero." }
        cpus = { 4 * task.attempt }
        memory = { 32.GB * task.attempt }
        label = 'med_priority'
        ext.args = ''
    }

    withName: ARRIBA {
        ext.prefix = ''
        cpus = { 4 * task.attempt }
        memory = { 32.GB * task.attempt }
        ext.args = ''
    }

    withName: STAR_ALIGNER {
        cpus = { 2 * task.attempt }
        memory = { 16.GB * task.attempt }
        ext.args = ''
    }

    withName: STAR_INDEX {
        ext.prefix = ''
        publishDir = [  path: "${params.star_index_dir}", 
                        mode: params.publish_dir_mode ]
        cpus = { 4 * task.attempt }
        memory = { 64.GB * task.attempt }
        label = 'high_priority'
        ext.args = ''
    }

    withName: BUILD_GENOME_REFS {
        ext.prefix = ''
        cpus = { 4 * task.attempt }
        memory = { 64.GB * task.attempt }
        ext.args = ''
    }

    withName: FASTQC {
        ext.prefix = ''
        cpus = { 2 * task.attempt }
        memory = { 16.GB * task.attempt }
        label = 'low_priority'
        ext.args = ''
    }

    withName: MULTIQC {
        ext.prefix = ''
        cpus = { 2 * task.attempt }
        memory = { 16.GB * task.attempt }
        ext.args = '--export --data-dir --verbose'
    }

    withName: MD5SUMS {
        ext.prefix = ''
        cpus = 1
        memory = { 16.GB * task.attempt }
        label = 'low_priority'
        ext.args = ''
    }

    withName: UNZIP {
        ext.prefix = ''
        cpus = 1
        memory = { 8.GB * task.attempt }
        label = 'low_priority'
        ext.args = ''
    }
}


//Create profiles to easily switch between the different process executors and platforms.
profiles {
    //For running with hyperqueue job scheduler and docker  
    hyperqueue {
        docker { enabled = true }
        // priority scheduling for specific modules
        process {
            executor = 'hq'
            withLabel: high_priority {  clusterOptions = '--priority=5' }
            withLabel: med_priority { clusterOptions = '--priority=1' }
            withLabel: low_priority { clusterOptions = '--priority=-2' }
        }
    }
    //For running on an interactive session with docker  
    docker {
        process.executor = 'local'
        docker.enabled = true
    }
    //For running on an interactive session singularity 
    local_singularity {
        process.executor = 'local'
        singularity.enabled = true
    }
    //For running on an interactive session with apptainer  
    local_apptainer {
        process.executor = 'local'
        apptainer.enabled = true
    }
}

// Set default registry for Apptainer, Docker, Podman and Singularity independent of -profile
// Will not be used unless Apptainer / Docker / Podman / Singularity are enabled
// Set to your registry if you have a mirror of containers
// https://github.com/nf-core/tools/blob/master/nf_core/pipeline-template/nextflow.config
apptainer.registry   = 'quay.io'
docker.registry      = 'quay.io'
podman.registry      = 'quay.io'
singularity.registry = 'quay.io'

//Configs for singularity containers on cybertron
singularity {
    autoMounts = true
    cacheDir = "$HOME/singularity"
    runOptions = '--containall --no-home'
}

apptainer {
    autoMounts = true
    cacheDir = "$HOME/apptainer"
    runOptions = '--containall --no-home'
}

//Use personal mamba/conda environments on cybertron if params.conda_enabled = true
conda {
    cacheDir = "$HOME/mambaforge/envs/"
}

//overwrite reports when the workflow is executed again
report {
    overwrite = true
}
dag {
    overwrite = true
}
