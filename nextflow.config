// working directory for temporary/intermediate files produced in the workflow processes
workDir = "$HOME/temp"

params {
    // Cybertron parameters for HPC 
    project             = "207f23bf-acb6-4835-8bfe-142436acb58c"
    queue               = "sceaq"

    // Define inputs and output directory
    sample_sheet        = './sample_sheets/test_sample_sheet.csv'
    outdir              = './results'
    publish_dir_mode    = 'copy'

    // Genomic References
    genome              = 'GRCh38_no_alt' // required: value can be 'GRCh37-lite' or 'GRCh38_no_alt'
    fasta_file          = "/active/taylor_s/people/jsmi26/RPDEV/star_fusion_nf/resources/GRCh38/GRCh38_no_alt.fa" 
    gtf                 = "/active/taylor_s/people/jsmi26/RPDEV/star_fusion_nf/resources/GRCh38/gencode.v37.annotation.gtf.gz"

    // STAR-aligner index 
    build_index         = 'false' // required: boolean 'true' or 'false'
    star_index_dir      = '/active/taylor_s/people/jsmi26/RPDEV/star_fusion_nf/resources/GRCh38/reference/Homo_sapiens/GRCh38_no_alt/STAR_gencode_v44/GenomeDir' // required: filepath  

    // Fusion References 
    star_genome_lib     = "/active/taylor_s/people/jsmi26/RPDEV/star_fusion_nf/resources/GRCh38/GRCh38_gencode_v37_CTAT_lib_Mar012021.plug-n-play/ctat_genome_lib_build_dir"
    cicero_genome_lib   = "/active/taylor_s/people/jsmi26/RPDEV/star_fusion_nf/resources/GRCh38/reference"

    // Optionally, build fusion references
    build_genome_library        = 'false'
    pfam_db                     = 'current'
    dfam_db                     = 'human' // value of 'human', 'mouse', or filepath to Dfam.hmm database
}

// Computational resource allocation for the processes run in the workflow
process {
    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].toLowerCase()}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]
    errorStrategy = "retry"
    maxRetries = 1

    // STAR process specific parameters
    withName: STAR_PREP_FUSION {
        ext.prefix = { "${sample}star." }
        cpus = { 4 * task.attempt }
        memory = { 32.GB * task.attempt }
        ext.args = ''
    }

    // STAR process specific parameters
    withName: STAR_FUSION {
        ext.prefix = ''
        cpus = { 4 * task.attempt }
        memory = { 32.GB * task.attempt }
        ext.args = { "--misc_FI_opts '--out_prefix=${sample}' --FusionInspector inspect --extract_fusion_reads --examine_coding_effect --verbose_level 2" }
    }

    withName: CICERO {
        ext.prefix = { "${sample}${genome}" }
        cpus = { 4 * task.attempt }
        memory = { 32.GB * task.attempt }
        ext.args = ''
    }

    withName: STAR_ALIGNER {
        ext.prefix = { "${sample}cicero." }
        cpus = { 2 * task.attempt }
        memory = { 16.GB * task.attempt }
        ext.args = ''
    }

    withName: STAR_INDEX {
        ext.prefix = ''
        publishDir = [  path: "${params.star_index_dir}", 
                        mode: params.publish_dir_mode
                    ]
        cpus = { 2 * task.attempt }
        memory = { 16.GB * task.attempt }
        ext.args = ''
    }

    withName: BUILD_GENOME_REFS {
        ext.prefix = ''
        cpus = { 4 * task.attempt }
        memory = { 64.GB * task.attempt }
        ext.args = ''
    }

    withName: FASTQC {
        ext.prefix = ''
        cpus = { 1 * task.attempt }
        memory = { 16.GB * task.attempt }
        ext.args = ''
    }

    withName: MULTIQC {
        ext.prefix = ''
        cpus = { 1 * task.attempt }
        memory = { 16.GB * task.attempt }
        ext.args = '--export --data-dir --verbose'
    }

    withName: MD5SUMS {
        ext.prefix = ''
        cpus = 1
        memory = { 16.GB * task.attempt }
        ext.args = ''
    }

    withName: UNZIP {
        ext.prefix = ''
        cpus = 1
        memory = { 8.GB * task.attempt }
        ext.args = ''
    }
}


//Create profiles to easily switch between the different process executors and platforms.
profiles {
    //For executing the jobs on the HPC cluster with apptainer containers
    PBS_apptainer {
        process.executor = 'pbspro'
        process.queue = "${params.queue}"
        process.clusterOptions = "-P ${params.project}"
        process.beforeScript = 'module load apptainer'
        apptainer.enabled = true
    }
    //For running on cybertron with apptainer module loaded
    local_apptainer {
        process.executor = 'local'
        apptainer.enabled = true
    }
    //For running on an interactive session on cybertron with singularity module loaded
    local_singularity {
        process.executor = 'local'
        singularity.enabled = true
    }
    //For executing the jobs on the HPC cluster with singularity containers
    PBS_singularity {
        process.executor = 'pbspro'
        process.queue = "${params.queue}"
        process.clusterOptions = "-P ${params.project}"
        process.beforeScript = 'module load singularity'
        singularity.enabled = true
    }
}

// Set default registry for Apptainer, Docker, Podman and Singularity independent of -profile
// Will not be used unless Apptainer / Docker / Podman / Singularity are enabled
// Set to your registry if you have a mirror of containers
// https://github.com/nf-core/tools/blob/master/nf_core/pipeline-template/nextflow.config
apptainer.registry   = 'quay.io'
docker.registry      = 'quay.io'
podman.registry      = 'quay.io'
singularity.registry = 'quay.io'

//Configs for singularity containers on cybertron
singularity {
    autoMounts = true
    cacheDir = "$HOME/singularity"
    runOptions = '--containall --no-home'
}

apptainer {
    autoMounts = true
    cacheDir = "$HOME/apptainer"
    runOptions = '--containall --no-home'
}

//Use personal mamba/conda environments on cybertron if params.conda_enabled = true
conda {
    cacheDir = "$HOME/mambaforge/envs/"
}

//overwrite reports when the workflow is executed again
report {
    overwrite = true
}
dag {
    overwrite = true
}
