//working directory for temporary/intermediate files produced in the workflow processes
workDir = "$HOME/temp"

params {
    // Cybertron parameters for HPC 
    project             =       "207f23bf-acb6-4835-8bfe-142436acb58c"
    queue               =       "sceaq"

    // Define inputs and output directory
    sample_sheet        =       './sample_sheets/test_sample_sheet.csv'
    outdir              =       './results'
    BASE_DIR            =       "./results"
    publish_dir_mode    =       'copy'

    // Declare the output directories 
    STAR_aligner_out    =       "${params.BASE_DIR}/aligned"
    STAR_Fusion_out     =       "${params.BASE_DIR}/fusion"
    CICERO_out          =       "${params.BASE_DIR}/fusion"
    multiQC_out         =       "${params.BASE_DIR}/multiQC"

    // Genomic References
    fasta_file          =       "./resources/GRCh37/GRCh37-lite.fa"
    gtf                 =       "./resources/GRCh37/Homo_sapiens.GRCh37.74.gtf.gz"
    star_genome_lib     =       "./resources/GRCh37/GRCh37_gencode_v19_CTAT_lib_Mar012021.plug-n-play/ctat_genome_lib_build_dir"
    star_index_out      =       "./resources/GRCh37/reference/Homo_sapiens/GRCh37-lite/STAR_gencode_v19"
    cicero_genome_lib   =       "./resources/GRCh37/reference"
}

// Computational resource allocation for the processes run in the workflow
process {
    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].toLowerCase()}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]
    errorStrategy = "terminate"
    maxRetries = 0

    // STAR process specific parameters
    withName: STAR_Prep_Fusion {
        cpus = { 4 * task.attempt }
        memory = { 32.GB * task.attempt }
        ext.args = ''
    }

    // STAR process specific parameters
    withName: STAR_Fusion {
        cpus = 4
        memory = 128.GB
        ext.args = ''
    }

    withName: CICERO {
        cpus = { 4 * task.attempt }
        memory = { 32.GB * task.attempt }
        ext.args = ''
    }

    withName: STAR_aligner {
        cpus = { 2 * task.attempt }
        memory = { 16.GB * task.attempt }
        ext.args = ''
    }

    withName: STAR_index {
        publishDir = [  path: "${params.star_index_out}", 
                        mode: params.publish_dir_mode
                    ]
        cpus = { 2 * task.attempt }
        memory = { 16.GB * task.attempt }
        ext.args = ''
    }

    withName: unzip {
        cpus = 1
        memory = { 8.GB * task.attempt }
        ext.args = ''
    }

    withName: fastqc {
        cpus = 2
        memory = { 16.GB * task.attempt }
        ext.args = ''
    }

    withName: multiqc {
        cpus = 2
        memory = { 16.GB * task.attempt }
        ext.args = ''
    }

    withName: MD5sums {
        cpus = 1
        memory = { 16.GB * task.attempt }
        ext.args = ''
    }
}


//Create profiles to easily switch between the different process executors and platforms.
profiles {
    //For executing the jobs on the HPC cluster with apptainer containers
    PBS_apptainer {
        process.executor = 'pbspro'
        process.queue = "${params.queue}"
        process.clusterOptions = "-P ${params.project}"
        process.beforeScript = 'module load apptainer'
        apptainer.enabled = true
    }
    //For running on cybertron with apptainer module loaded
    local_apptainer {
        process.executor = 'local'
        apptainer.enabled = true
    }
    //For running on an interactive session on cybertron with singularity module loaded
    local_singularity {
        process.executor = 'local'
        singularity.enabled = true
    }
    //For executing the jobs on the HPC cluster with singularity containers
    PBS_singularity {
        process.executor = 'pbspro'
        process.queue = "${params.queue}"
        process.clusterOptions = "-P ${params.project}"
        process.beforeScript = 'module load singularity'
        singularity.enabled = true
    }
}

// Set default registry for Apptainer, Docker, Podman and Singularity independent of -profile
// Will not be used unless Apptainer / Docker / Podman / Singularity are enabled
// Set to your registry if you have a mirror of containers
// https://github.com/nf-core/tools/blob/master/nf_core/pipeline-template/nextflow.config
apptainer.registry   = 'quay.io'
docker.registry      = 'quay.io'
podman.registry      = 'quay.io'
singularity.registry = 'quay.io'

//Configs for singularity containers on cybertron
singularity {
    autoMounts = true
    cacheDir = "$HOME/singularity"
    runOptions = '--containall --no-home'
}

apptainer {
    autoMounts = true
    cacheDir = "$HOME/apptainer"
    runOptions = '--containall --no-home'
}

//Use personal mamba/conda environments on cybertron if params.conda_enabled = true
conda {
    cacheDir = "$HOME/mambaforge/envs/"
}

//overwrite reports when the workflow is executed again
report {
    overwrite = true
}
dag {
    overwrite = true
}
